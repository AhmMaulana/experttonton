// Mocks generated by Mockito 5.2.0 from annotations
// in sub1experttonton/test/presentation/bloc/unitvy_bloc/unitvy_watchlist_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;

import 'package:dartz/dartz.dart' as _i7;
import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sub1experttonton/common/failure.dart' as _i11;
import 'package:sub1experttonton/domain/entities/unitvy/unitvy.dart' as _i12;
import 'package:sub1experttonton/domain/entities/unitvy/unitvy_detail.dart'
    as _i13;
import 'package:sub1experttonton/domain/repositories/unitvy_repository.dart'
    as _i8;
import 'package:sub1experttonton/domain/usecases/unitvy/get_watchlist_status_unitvy.dart'
    as _i3;
import 'package:sub1experttonton/domain/usecases/unitvy/get_watchlist_unitvy.dart'
    as _i2;
import 'package:sub1experttonton/domain/usecases/unitvy/remove_watchlist_unitvy.dart'
    as _i5;
import 'package:sub1experttonton/domain/usecases/unitvy/save_watchlist_unitvy.dart'
    as _i4;
import 'package:sub1experttonton/presentation/bloc/unitvy_bloc/watchlist_unitvy_bloc/watchlist_unitvy_bloc.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetWatchlistUnitvy_0 extends _i1.Fake
    implements _i2.GetWatchlistUnitvy {}

class _FakeGetWatchListStatusUnitvy_1 extends _i1.Fake
    implements _i3.GetWatchListStatusUnitvy {}

class _FakeSaveWatchlistUnitvy_2 extends _i1.Fake
    implements _i4.SaveWatchlistUnitvy {}

class _FakeRemoveWatchlistUnitvy_3 extends _i1.Fake
    implements _i5.RemoveWatchlistUnitvy {}

class _FakeWatchlistUnitvyState_4 extends _i1.Fake
    implements _i6.WatchlistUnitvyState {}

class _FakeEither_5<L, R> extends _i1.Fake implements _i7.Either<L, R> {}

class _FakeUnitvyRepository_6 extends _i1.Fake implements _i8.UnitvyRepository {
}

/// A class which mocks [WatchlistUnitvyBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistUnitvyBloc extends _i1.Mock
    implements _i6.WatchlistUnitvyBloc {
  MockWatchlistUnitvyBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetWatchlistUnitvy get getWatchlistUnitvy =>
      (super.noSuchMethod(Invocation.getter(#getWatchlistUnitvy),
          returnValue: _FakeGetWatchlistUnitvy_0()) as _i2.GetWatchlistUnitvy);
  @override
  _i3.GetWatchListStatusUnitvy get getWatchListStatus =>
      (super.noSuchMethod(Invocation.getter(#getWatchListStatus),
              returnValue: _FakeGetWatchListStatusUnitvy_1())
          as _i3.GetWatchListStatusUnitvy);
  @override
  _i4.SaveWatchlistUnitvy get saveWatchlist => (super.noSuchMethod(
      Invocation.getter(#saveWatchlist),
      returnValue: _FakeSaveWatchlistUnitvy_2()) as _i4.SaveWatchlistUnitvy);
  @override
  _i5.RemoveWatchlistUnitvy get removeWatchlist =>
      (super.noSuchMethod(Invocation.getter(#removeWatchlist),
              returnValue: _FakeRemoveWatchlistUnitvy_3())
          as _i5.RemoveWatchlistUnitvy);
  @override
  _i6.WatchlistUnitvyState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeWatchlistUnitvyState_4()) as _i6.WatchlistUnitvyState);
  @override
  _i9.Stream<_i6.WatchlistUnitvyState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i6.WatchlistUnitvyState>.empty())
          as _i9.Stream<_i6.WatchlistUnitvyState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i6.WatchlistUnitvyEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i6.WatchlistUnitvyEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i6.WatchlistUnitvyState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i6.WatchlistUnitvyEvent>(
          _i10.EventHandler<E, _i6.WatchlistUnitvyState>? handler,
          {_i10.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i10.Transition<_i6.WatchlistUnitvyEvent, _i6.WatchlistUnitvyState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void onChange(_i10.Change<_i6.WatchlistUnitvyState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetWatchlistUnitvy].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistUnitvy extends _i1.Mock
    implements _i2.GetWatchlistUnitvy {
  MockGetWatchlistUnitvy() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i7.Either<_i11.Failure, List<_i12.Unitvy>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue:
                  Future<_i7.Either<_i11.Failure, List<_i12.Unitvy>>>.value(
                      _FakeEither_5<_i11.Failure, List<_i12.Unitvy>>()))
          as _i9.Future<_i7.Either<_i11.Failure, List<_i12.Unitvy>>>);
}

/// A class which mocks [GetWatchListStatusUnitvy].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatusUnitvy extends _i1.Mock
    implements _i3.GetWatchListStatusUnitvy {
  MockGetWatchListStatusUnitvy() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.UnitvyRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeUnitvyRepository_6()) as _i8.UnitvyRepository);
  @override
  _i9.Future<bool> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
}

/// A class which mocks [RemoveWatchlistUnitvy].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlistUnitvy extends _i1.Mock
    implements _i5.RemoveWatchlistUnitvy {
  MockRemoveWatchlistUnitvy() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.UnitvyRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeUnitvyRepository_6()) as _i8.UnitvyRepository);
  @override
  _i9.Future<_i7.Either<_i11.Failure, String>> execute(_i13.UnitvyDetail? tv) =>
      (super.noSuchMethod(Invocation.method(#execute, [tv]),
              returnValue: Future<_i7.Either<_i11.Failure, String>>.value(
                  _FakeEither_5<_i11.Failure, String>()))
          as _i9.Future<_i7.Either<_i11.Failure, String>>);
}

/// A class which mocks [SaveWatchlistUnitvy].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlistUnitvy extends _i1.Mock
    implements _i4.SaveWatchlistUnitvy {
  MockSaveWatchlistUnitvy() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.UnitvyRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeUnitvyRepository_6()) as _i8.UnitvyRepository);
  @override
  _i9.Future<_i7.Either<_i11.Failure, String>> execute(_i13.UnitvyDetail? tv) =>
      (super.noSuchMethod(Invocation.method(#execute, [tv]),
              returnValue: Future<_i7.Either<_i11.Failure, String>>.value(
                  _FakeEither_5<_i11.Failure, String>()))
          as _i9.Future<_i7.Either<_i11.Failure, String>>);
}
