// Mocks generated by Mockito 5.2.0 from annotations
// in sub1experttonton/test/presentation/bloc/unitvy_bloc/unitvy_detail_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:bloc/bloc.dart' as _i9;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sub1experttonton/common/failure.dart' as _i7;
import 'package:sub1experttonton/domain/entities/unitvy/unitvy_detail.dart'
    as _i8;
import 'package:sub1experttonton/domain/repositories/unitvy_repository.dart'
    as _i2;
import 'package:sub1experttonton/domain/usecases/unitvy/get_unitvy_detail.dart'
    as _i4;
import 'package:sub1experttonton/presentation/bloc/unitvy_bloc/detail_unitvy_bloc/detail_unitvy_bloc.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUnitvyRepository_0 extends _i1.Fake implements _i2.UnitvyRepository {
}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeGetUnitvyDetail_2 extends _i1.Fake implements _i4.GetUnitvyDetail {}

class _FakeDetailUnitvyState_3 extends _i1.Fake
    implements _i5.DetailUnitvyState {}

/// A class which mocks [GetUnitvyDetail].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUnitvyDetail extends _i1.Mock implements _i4.GetUnitvyDetail {
  MockGetUnitvyDetail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UnitvyRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeUnitvyRepository_0()) as _i2.UnitvyRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.UnitvyDetail>> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i3.Either<_i7.Failure, _i8.UnitvyDetail>>.value(
              _FakeEither_1<_i7.Failure, _i8.UnitvyDetail>())) as _i6
          .Future<_i3.Either<_i7.Failure, _i8.UnitvyDetail>>);
}

/// A class which mocks [DetailUnitvyBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailUnitvyBloc extends _i1.Mock implements _i5.DetailUnitvyBloc {
  MockDetailUnitvyBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetUnitvyDetail get getDetailUnitvy =>
      (super.noSuchMethod(Invocation.getter(#getDetailUnitvy),
          returnValue: _FakeGetUnitvyDetail_2()) as _i4.GetUnitvyDetail);
  @override
  _i5.DetailUnitvyState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeDetailUnitvyState_3()) as _i5.DetailUnitvyState);
  @override
  _i6.Stream<_i5.DetailUnitvyState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i5.DetailUnitvyState>.empty())
          as _i6.Stream<_i5.DetailUnitvyState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i5.DetailUnitvyEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i5.DetailUnitvyEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i5.DetailUnitvyState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i5.DetailUnitvyEvent>(
          _i9.EventHandler<E, _i5.DetailUnitvyState>? handler,
          {_i9.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i9.Transition<_i5.DetailUnitvyEvent, _i5.DetailUnitvyState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void onChange(_i9.Change<_i5.DetailUnitvyState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
